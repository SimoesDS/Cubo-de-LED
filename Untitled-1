#include<stdio.h>
#include<string.h>
#include <stdint.h>
#include <stdlib.h>

static const char* PREFIX_NAMENETWORK = "NN:";
static const char* PREFIX_PASSNETWORK = "PN:";
static const char* PREFIX_CONFIGNETWORK = "CN:";
static const char  SUFIX_COMMA = ',';

unsigned int getStrLength(const uint8_t * _data){
  int length = 0;
  while(_data[length] != '\0') length++;
  return length;
}

unsigned int srcInitPrefix(const uint8_t * _data, const char *prefix, size_t lengthData){
  if(!lengthData) lengthData = getStrLength(_data);
  const int lengthPrefix = strlen(prefix);

  for(int i = 0, k = 0; i < lengthData; i++){
    if( _data[i] == prefix[k]){
      if(k >= lengthPrefix - 1){
        return i + 1;
      }
      k++;
    } else k = 0;
  }
  return 0;
}

void substrData(uint8_t *returnData, const uint8_t *_data, const uint8_t startData, const uint8_t length){
  for (int i = 0, k = startData; i < length; k++, i++) 
      returnData[i] = _data[k];
  returnData[length] = '\0';
}

int getInfData(uint8_t *startData, uint8_t *lengthDataSrc, const uint8_t *dataReceiver, const size_t lengthData, const char *prefix, const char sufix){
  *startData = srcInitPrefix(dataReceiver, prefix, lengthData);

  if( *(dataReceiver + *startData) == '\0') return -1;
  
  // Descobre o tamanho da string a partir do startData atÃ© a sufix
  for (int k = *startData; (dataReceiver[k] != '\0') && (dataReceiver[k] != sufix); k++, *(lengthDataSrc) +=1);
  return 1;
}

uint8_t * getDataReceiver(uint8_t *returnData, const uint8_t *data, const size_t lengthData, const char *prefix, const char sufix){
  uint8_t startData = 0;
  uint8_t lengthDataSrc = 0;
  getInfData(&startData, &lengthDataSrc, data, lengthData, prefix, sufix);
  returnData = (uint8_t *) malloc(lengthDataSrc + 1 * sizeof(uint8_t));
  if(!returnData) printf("Error: Can't allocate memory for name network");
  substrData(returnData, data, startData, lengthDataSrc);
  return returnData;
}

uint8_t *getNameNetwork(uint8_t *returnData, const uint8_t *data, const size_t lengthData){
  return getDataReceiver(returnData, data, lengthData, PREFIX_NAMENETWORK, SUFIX_COMMA);
}

uint8_t *getPassNetwork(uint8_t *returnData, const uint8_t *data, const size_t lengthData){
  return getDataReceiver(returnData, data, lengthData, PREFIX_PASSNETWORK, SUFIX_COMMA);
}

uint8_t isConfigNetwork(uint8_t *data){
  return srcInitPrefix(data, PREFIX_CONFIGNETWORK, strlen(PREFIX_CONFIGNETWORK));
}

char payold[] = "CN:NN:Minha Rede,PN:123456789";

int main() {
//========== LIXO =====================
    uint8_t * payload = (uint8_t *) malloc(sizeof(payold) - 1 * sizeof(uint8_t));
    if(payload == NULL)
      printf("Deu muito ruim!!");
    
    int x = 0;
    for(; payold[x] != '\0'; x++)
      *(payload + x) = (char) payold[x];
    *(payload + x) = '\0';

    size_t length = getStrLength(payload);
//=========================================
    if(isConfigNetwork(payload)){
      uint8_t *strNameNetwork;
      strNameNetwork = getNameNetwork(strNameNetwork, payload, length);
      printf("Name: %s\n", strNameNetwork);

      uint8_t *strPassNetwork;
      strPassNetwork = getPassNetwork(strPassNetwork, payload, length);
      printf("Pass: %s\n", strPassNetwork);
    }

    return (0);
}





/*
var connection = new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);

var statesAzul = ['ligar_azul', 'desligar_azul'];
var stsBtnAzul = statesAzul[0];

connection.onopen = function () {
  connection.send('Connect ' + new Date());
};
connection.onerror = function (error) {
  console.log('WebSocket Error ', error);
};
connection.onmessage = function (e) {
  console.log('Server: ', e.data);
};
connection.onclose = function () {
  console.log('WebSocket connection closed');
};

function btnBlue() { connection.send('B'); }

function btnRed() { connection.send('R'); }

function btnGreen() { connection.send('G'); }

function btnTest() { connection.send('T'); }
*/